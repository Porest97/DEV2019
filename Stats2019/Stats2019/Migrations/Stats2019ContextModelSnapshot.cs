// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stats2019.Models;

namespace Stats2019.Migrations
{
    [DbContext(typeof(Stats2019Context))]
    partial class Stats2019ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Stats2019.Models.Arena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArenaName");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Arena");
                });

            modelBuilder.Entity("Stats2019.Models.Matches", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArenaId");

                    b.Property<int>("Day");

                    b.Property<DateTime>("MatchDate");

                    b.Property<int>("PersonId");

                    b.Property<int>("ScoreTeamAway");

                    b.Property<int>("ScoreTeamHome");

                    b.Property<int>("SeriesId");

                    b.Property<string>("TeamAway");

                    b.Property<int>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("ArenaId");

                    b.HasIndex("SeriesId");

                    b.HasIndex("TeamId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Stats2019.Models.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LMFee");

                    b.Property<string>("MatchLength");

                    b.Property<int>("RefFee");

                    b.Property<string>("SeriesName");

                    b.HasKey("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("Stats2019.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArenaId");

                    b.Property<string>("TeamName");

                    b.HasKey("Id");

                    b.HasIndex("ArenaId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Stats2019.Models.Arena", b =>
                {
                    b.OwnsOne("Stats2019.Models.Address", "Address", b1 =>
                        {
                            b1.Property<int>("ArenaId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("City");

                            b1.Property<string>("County");

                            b1.Property<string>("Street");

                            b1.Property<string>("ZipCode");

                            b1.HasKey("ArenaId");

                            b1.ToTable("Arena");

                            b1.HasOne("Stats2019.Models.Arena")
                                .WithOne("Address")
                                .HasForeignKey("Stats2019.Models.Address", "ArenaId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Stats2019.Models.Matches", b =>
                {
                    b.HasOne("Stats2019.Models.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stats2019.Models.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stats2019.Models.Team", "TeamHome")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stats2019.Models.Team", b =>
                {
                    b.HasOne("Stats2019.Models.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId");
                });
#pragma warning restore 612, 618
        }
    }
}
